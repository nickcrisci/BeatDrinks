### Business Logic - Pseudocode
### State 06.12.2020

interface MusicStrategy {
    //stores requested Spotify data
    title : String
    artist : String
    album : String
    genre : String
    registeredMood : String
    link : String
}

class Track : MusicStrategy

class Playlist : MusicStrategy {
    tracks : Array<Track>()
}

class Cocktail {
    //derives from cocktail.json
    name : String
    recipe : Array<Pair<ingredient : Ingredient, quantity : Int>>()
    teaserText : String
}

class Ingredient{
    //derives from cocktail.json
    name: String
    details: String
}

//the mood is one essential aspect for desired combinations
class Mood () {
    currentMood : String?
    //More specific attributes for spotify API (e.g. danceability, acousticeness, ...)
    attribute1 : float
    attribute2 : float
    attribute3 : float

    //User Preferences on things he wants / does not want in music or recipes
    preference1 : String
    preference2 : String
    
    getCurrentMood() {
        input = readline()
        if(input is valid):
            currentMood = input
        else throw InvalidInputError  
    }

    getSpecificMood(){
        attribute1 = readline()
        attribute2 = readline()
        attribute3 = readline()
    }

    getUserPreference(){
        preference1 = readline()
        preference2 = readline()
    }
}

class Translator{
    translateToSpotify(mood : Mood){
        //Translates mood in values for Spotify
        spotifyMood = mood gets translated into Array<float>
        return SpotifyMood
    }
}

class Combinator {
    //Combines a mood with a track fitting the mood
    getTrack(mood : Mood) : Track {
        track : Track = Aufruf an Spotify API
        return track
    }

    //Combines a mood with a Cocktail recipe fitting the mood
    getCocktail(mood : Mood) : Cocktail {
        cocktail : Cocktail = Request to Cocktail DB 
        return cocktail
    }
    
    createCombination (cocktail : Cocktail, trackOrPlaylist : MusicStrategy) : Combination {
        val myCombination : Combination
        myCombination.cocktail = cocktail
        myCombination.trackOrPlaylist = trackOrPlaylist
        return myCombination
    }
}

class Combination {
    cocktail : Cocktail()
    trackOrPlaylist : MusicStrategy
    deliverCombi() = this
}

class SpotifyAPI {
    getTrack(mood : Mood) : Track {
        track = new Track

        tracks = request SpotifyApi(mood.currentMood)

        track.title = tracks[0].title
        track.artist = tracks[0].artist
        track.album = tracks[0].album
        track.genre = tracks[0].genre
        track.mood = tracks[0].mood
        track.link = tracks[0].link

        return track
    }

    getPlaylist(mood : Mood, trackAmount : Int) : Playlist {
        var myTracks = arrayOf<Track>()
        val playlist = Playlist()

        try:
            for (i = 0; i <= amount, i++) {
            playlist.add(getTrack(mood))
            playlist.tracks = myTracks
            return playlist
        }
        except IndexError: 
            console.log("The specified track amount $trackAmount was too high.")
        finally:
            return playlist
    }
}