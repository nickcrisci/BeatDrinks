### Business Logic - Pseudocode
### State 06.12.2020

interface Music {
    //stores requested Spotify data
    title : String
    artist : String
    album : String
    genre : String
    registeredMood : String
    link : String
}

class Track : Music

class Playlist : Music {
    tracks : Array<Track>()
}

class Cocktail {
    //derives from cocktail.json
    name : String
    recipe : Array<Pair<ingredient : Ingredient, quantity : Int>>()
    teaserText : String
}

class Ingredient {
    //derives from cocktail.json
    name: String
    details: String
}

//the mood is one essential aspect for desired combinations
class Mood() {
    currentMood : String?
    //More specific attributes for spotify API (e.g. danceability, acousticeness, ...)
    attribute1 : Pair<name : String, value : float>
    attribute2 : Pair<name : String, value : float>
    attribute3 : Pair<name : String, value : float>

    //User Preferences on things he wants / does not want in music or recipes
    preference1 : String
    preference2 : String
    
    getCurrentMood() {
        input = readline()
        if(input is valid):
            currentMood = input
        else throw InvalidInputError  
    }

    getSpecificMood() {
        attribute1 = readline()
        attribute2 = readline()
        attribute3 = readline()
    }

    getUserPreference() {
        preference1 = readline()
        preference2 = readline()
    }
}

class Translator {
    translateToSpotify(mood : Mood) {
        //Translates mood in values for Spotify
        spotifyMood = mood gets translated into Array<float>
        return SpotifyMood
    }
}

class Combination {
    cocktail : Cocktail
    trackOrPlaylist : Music
    deliverCombi() = this
}

class Combinator {
    //Combines a mood with a track fitting the mood
    getTrack(mood : Mood) : Track {
        track : Track = Request to Spotify API
        return track
    }

    //Combines a mood with a Cocktail recipe fitting the mood
    function getCocktail(mood : Mood) {

        ## Hier wird eine Anfrage an die Cocktail DB vorgenommen (in diesem Fall die Cocktail.json Datei) ##
        ## Die Cocktail Objekte in der Json werden dabei mit der übergebenen Stimmung (mood) verglichen ##
        ## Wenn die Stimmung zum Cocktail passt wird dieser zurückgegeben ##

        result = GET Cocktail from Cocktail.json
        cocktail : Cocktail = new Cocktail()

        cocktail.name = result[name] ## Diese Syntax ist an das Dictionary von Python angelegt, Ihr könnt das natürlich ändern.
        cocktail.recipe = result[recipe]
        cocktail.teaserText = result[teaserText]

        return cocktail
    }
    
    createCombination (cocktail : Cocktail, trackOrPlaylist : Music) : Combination {
        myCombination : Combination = new Combination()
        myCombination.cocktail = cocktail
        myCombination.trackOrPlaylist = trackOrPlaylist
        return myCombination
    }
}

class SpotifyAPI {
    getTrack(mood : Mood) : Track {
        track = new Track

        tracks = request SpotifyApi(mood.currentMood)

        track.title = tracks[0].title
        track.artist = tracks[0].artist
        track.album = tracks[0].album
        track.genre = tracks[0].genre
        track.mood = tracks[0].mood
        track.link = tracks[0].link

        return track
    }

    getPlaylist(mood : Mood, trackAmount : Int) : Playlist {
        var myTracks = arrayOf<Track>()
        val playlist = Playlist()

        try:
            for (i = 0; i <= amount, i++) {
            playlist.add(getTrack(mood))
            playlist.tracks = myTracks
            return playlist
        }
        except IndexError: 
            console.log("The specified track amount $trackAmount was too high.")
        finally:
            return playlist
    }

## Transformation Stimmung in Parameter:

function translateMood(mood : String) : Mood {
    when (mood) {
        "happy" -> {
            numericMood = new Mood()
            numericMood.attribute1 = Pair("danceability", 1.0)
            numericMood.attribute1 = Pair("valence", 1.0)
            numericMood.attribute1 = Pair("loudness", 0.8)
            return numericMood
        }
        "sad" -> {
            numericMood = new Mood()
            numericMood.attribute1 = Pair("danceability", 0.2)
            numericMood.attribute1 = Pair("valence", 0.2)
            numericMood.attribute1 = Pair("loudness", 0.3)
            return numericMood
        }
        "angry" -> {
            numericMood = new Mood()
            numericMood.attribute1 = Pair("danceability", 0.3)
            numericMood.attribute1 = Pair("valence", 0.3)
            numericMood.attribute1 = Pair("loudness", 1.0)
            return numericMood
        }
        default -> {                                            #Default greift hier, falls ein falscher Wert für mood übergeben wird, somit kann dennoch ein Ergebnis geliefert werden.
            numericMood = new Mood()
            numericMood.attribute1 = Pair("danceability", 0.5)
            numericMood.attribute1 = Pair("valence", 0.5)
            numericMood.attribute1 = Pair("loudness", 0.5)
            return numericMood
        }
    }
}

## Erzeugen einer URL für den Request an die Spotify API
function generateURL(mood : Mood) : String {
    base : String = "https://api.spotify.com/v1/recommendations?"
    suffix : String = ""

    for (attribute of mood) {
        suffix += "&$attribute.name=$attribute.value"
    }

    return base + suffix
}

## Aufruf an Spotify API
    #Einzelner Track 
    function getSingleTrack(mood : Mood) : Track {                                                                                          ########### 
        track : Track = GET generateURL(mood.currentMood)[0] ### gibt Array von Tracks zurück, durch [0] wird nur der Erste übernommen
        return track
    }

    #Mehrere Tracks als Playlist, die Anzahl wird durch numberOfTracks angegeben
    function getPlaylist(mood : Mood, numberOfTracks : Int) : Playlist {
        playlist : Playlist = new Playlist()
        tracks = GET generateURL(mood.currentMood) 
        for (i = 0; i < numberOfTracks; i++) {
            playlist.tracks.add(tracks[i])
        }
        return playlist
    }

## Hier finden die Aufrufe der definierten Funktionen statt.
function main() {
    combinator : Combinator = new Combinator()
    mood : Mood = translateMood(getCurrentMood())                   #################### getCurrentMood ist eigentlich in der Klasse Mood. Entweder muss die translateMood Funktion die ich hier
                                                                    #################### geschrieben hab in die Mood Klasse, oder die getCurrentMood da raus.
    track : Track = combinator.getTrack(generateURL(mood))          #################### Aufruf läuft eigentlich über get an die URL, Combinator muss also in der anderen Datei angepasst werden
    cocktail : Cocktail = combinator.getCocktail(mood)
    combination : Combination = combinator.createCombination(cocktail, track)
}