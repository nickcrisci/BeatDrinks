### Pseudocode für eines der User Journeys ###

## In den einzelnen Funktionen wird bezug auf die Klassen in der Datei Anwendungslogik_1220 genommen.

## Übergabe einer Stimmung:
# - # - # - # - # - # - # - # 

Hier ist mir noch nichts eingefallen

# - # - # - # - # - # - # - #


## Transformation Stimmung in Parameter:

function translateMood(mood : String) : Mood {
    when (mood) {
        "happy" -> {
            numericMood = new Mood()
            numericMood.attribute1 = Pair("danceability", 1.0)
            numericMood.attribute1 = Pair("valence", 1.0)
            numericMood.attribute1 = Pair("loudness", 0.8)
            return numericMood
        }
        "sad" -> {
            numericMood = new Mood()
            numericMood.attribute1 = Pair("danceability", 0.2)
            numericMood.attribute1 = Pair("valence", 0.2)
            numericMood.attribute1 = Pair("loudness", 0.3)
            return numericMood
        }
        "angry" -> {
            numericMood = new Mood()
            numericMood.attribute1 = Pair("danceability", 0.3)
            numericMood.attribute1 = Pair("valence", 0.3)
            numericMood.attribute1 = Pair("loudness", 1.0)
            return numericMood
        }
        default -> {                                            #Default greift hier, falls ein falscher Wert für mood übergeben wird, somit kann dennoch ein Ergebnis geliefert werden.
            numericMood = new Mood()
            numericMood.attribute1 = Pair("danceability", 0.5)
            numericMood.attribute1 = Pair("valence", 0.5)
            numericMood.attribute1 = Pair("loudness", 0.5)
            return numericMood
        }
    }
}

## Erzeugen einer URL für den Request an die Spotify API
function generateURL(mood : Mood) : String {
    base : String = "https://api.spotify.com/v1/recommendations?"
    suffix : String = ""

    for (attribute of mood) {
        suffix += "&$attribute.name=$attribute.value"
    }

    return base + suffix
}

## Aufruf an Spotify API
    #Einzelner Track 
    function getSingleTrack(mood : Mood) : Track {                                                                                          ########### 
        track : Track = GET generateURL(mood.currentMood)[0] ### gibt Array von Tracks zurück, durch [0] wird nur der Erste übernommen
        return track
    }

    #Mehrere Tracks als Playlist, die Anzahl wird durch numberOfTracks angegeben
    function getPlaylist(mood : Mood, numberOfTracks : Int) : Playlist {
        playlist : Playlist = new Playlist()
        tracks = GET generateURL(mood.currentMood) 
        for (i = 0; i < numberOfTracks; i++) {
            playlist.tracks.add(tracks[i])
        }
        return playlist
    }

## Hier finden die Aufrufe der definierten Funktionen statt.
function main() {
    combinator : Combinator = new Combinator()
    mood : Mood = translateMood(getCurrentMood())                   #################### getCurrentMood ist eigentlich in der Klasse Mood. Entweder muss die translateMood Funktion die ich hier
                                                                    #################### geschrieben hab in die Mood Klasse, oder die getCurrentMood da raus.
    track : Track = combinator.getTrack(generateURL(mood))          #################### Aufruf läuft eigentlich über get an die URL, Combinator muss also in der anderen Datei angepasst werden
    cocktail : Cocktail = combinator.getCocktail(mood)
    combination : Combination = combinator.createCombination(cocktail, track)
}







#### Stand 08.12, 20:06 
## Die Arbeit hier dran hat gezeigt, dass die Anwendungslogik von vor ein paar Tagen noch angepasst werden muss, damit tatsächlich die Logik funktioniert.
## Ich habe jetzt erstmal hier ein paar Zeilen Pseudocode geschrieben, allerdings könnte der auch in die Anwendungslogik Datei umgelagert werden.
## Daher stellt sich die Frage, ob der Proof-of-concept vllt. nur rein Textuell bestehen sollte. Eine textuelle Variante wird aber so oder so benötigt.
## Noch sind hier auch Lücken die ich erstmal nicht schließen konnte. Bei weiterer Überarbeitung sollte dies jedoch klappen.